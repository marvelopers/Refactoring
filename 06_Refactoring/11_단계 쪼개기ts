// const orderData = orderSting.split(/\s+\);
// const productPrice = priceList[orderData[0].split('-')[1]];
// const orderPrice = parseInt(orderData[1]*productPrice);

interface Order{
    productID: string;
    quantity: number;
}

const parseOrder = (aString: string) => {
  const values = aString.split(/\s+\);

  return ({
    productID : values[0].split('-')[1],
    quantity : parseInt(values[1]) 
  })
}

const price = (order: Order, priceList) => {
  return order.quantity * priceList[order.productID]
}

const orderRecord = parseOrder(order);
const orderPrice = price(orderRecord, priceList);

const calculatePricingData = (product, quantity) =>{
  const basePrice = product.basePrice * quantity;
  const discount = Math.max(quantity - product.discountThreshold, 0)*product.basePrice*product.discountRate;
  return {basePrice, quantity, discount}
}

const applyShipping = (priceData, shippingMethod) => {
  const shippingPerCase = (priceData.basePrice > shippingMethod.discountThreshold ? shippingMethod.discountFee : shippingMethod.feePerCase)
  const shippingCost = priceData.quantity * shippingPerCase;
  return priceData.basePrice - priceData.discount + shippingCost
}


const priceOrder = (product, quantity, shippingMethod) => {
  const priceData = calculatePricingData(product, quantity)
  return applyShipping(priceData, shippingMethod)
}